package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.JcbInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JCB_INFO.
*/
public class JcbInfoDao extends AbstractDao<JcbInfo, Long> {

    public static final String TABLENAME = "JCB_INFO";

    /**
     * Properties of entity JcbInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jcbid = new Property(1, String.class, "jcbid", false, "JCBID");
        public final static Property Jcbname = new Property(2, String.class, "jcbname", false, "JCBNAME");
        public final static Property Is_choose = new Property(3, Boolean.class, "is_choose", false, "IS_CHOOSE");
    };


    public JcbInfoDao(DaoConfig config) {
        super(config);
    }
    
    public JcbInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JCB_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'JCBID' TEXT," + // 1: jcbid
                "'JCBNAME' TEXT," + // 2: jcbname
                "'IS_CHOOSE' INTEGER);"); // 3: is_choose
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JCB_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JcbInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jcbid = entity.getJcbid();
        if (jcbid != null) {
            stmt.bindString(2, jcbid);
        }
 
        String jcbname = entity.getJcbname();
        if (jcbname != null) {
            stmt.bindString(3, jcbname);
        }
 
        Boolean is_choose = entity.getIs_choose();
        if (is_choose != null) {
            stmt.bindLong(4, is_choose ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public JcbInfo readEntity(Cursor cursor, int offset) {
        JcbInfo entity = new JcbInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jcbid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jcbname
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // is_choose
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JcbInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJcbid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJcbname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_choose(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JcbInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JcbInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
