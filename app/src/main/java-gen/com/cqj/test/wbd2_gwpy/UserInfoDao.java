package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Login_name = new Property(2, String.class, "login_name", false, "LOGIN_NAME");
        public final static Property Login_pwd = new Property(3, String.class, "login_pwd", false, "LOGIN_PWD");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Nick_name = new Property(5, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Phone_number = new Property(6, String.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Xuliehao = new Property(7, String.class, "xuliehao", false, "XULIEHAO");
        public final static Property Tongdao = new Property(8, String.class, "tongdao", false, "TONGDAO");
        public final static Property Is_login = new Property(9, Boolean.class, "is_login", false, "IS_LOGIN");
        public final static Property Date = new Property(10, java.util.Date.class, "date", false, "DATE");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UID' INTEGER NOT NULL ," + // 1: uid
                "'LOGIN_NAME' TEXT NOT NULL ," + // 2: login_name
                "'LOGIN_PWD' TEXT," + // 3: login_pwd
                "'NAME' TEXT," + // 4: name
                "'NICK_NAME' TEXT," + // 5: nick_name
                "'PHONE_NUMBER' TEXT," + // 6: phone_number
                "'XULIEHAO' TEXT," + // 7: xuliehao
                "'TONGDAO' TEXT," + // 8: tongdao
                "'IS_LOGIN' INTEGER," + // 9: is_login
                "'DATE' INTEGER);"); // 10: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindString(3, entity.getLogin_name());
 
        String login_pwd = entity.getLogin_pwd();
        if (login_pwd != null) {
            stmt.bindString(4, login_pwd);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(6, nick_name);
        }
 
        String phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindString(7, phone_number);
        }
 
        String xuliehao = entity.getXuliehao();
        if (xuliehao != null) {
            stmt.bindString(8, xuliehao);
        }
 
        String tongdao = entity.getTongdao();
        if (tongdao != null) {
            stmt.bindString(9, tongdao);
        }
 
        Boolean is_login = entity.getIs_login();
        if (is_login != null) {
            stmt.bindLong(10, is_login ? 1l: 0l);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // uid
            cursor.getString(offset + 2), // login_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // login_pwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nick_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone_number
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // xuliehao
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tongdao
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // is_login
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setLogin_name(cursor.getString(offset + 2));
        entity.setLogin_pwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNick_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone_number(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXuliehao(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTongdao(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_login(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
