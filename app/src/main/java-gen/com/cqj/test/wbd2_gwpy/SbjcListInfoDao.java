package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.SbjcListInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SBJC_LIST_INFO.
*/
public class SbjcListInfoDao extends AbstractDao<SbjcListInfo, Long> {

    public static final String TABLENAME = "SBJC_LIST_INFO";

    /**
     * Properties of entity SbjcListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cpid = new Property(1, Integer.class, "cpid", false, "CPID");
        public final static Property Prodname = new Property(2, String.class, "prodname", false, "PRODNAME");
        public final static Property Sccheckname = new Property(3, String.class, "sccheckname", false, "SCCHECKNAME");
        public final static Property Sccheckdate = new Property(4, String.class, "sccheckdate", false, "SCCHECKDATE");
        public final static Property Sccheckstat = new Property(5, String.class, "sccheckstat", false, "SCCHECKSTAT");
        public final static Property Sccheckdetail = new Property(6, String.class, "sccheckdetail", false, "SCCHECKDETAIL");
    };


    public SbjcListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SbjcListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SBJC_LIST_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CPID' INTEGER," + // 1: cpid
                "'PRODNAME' TEXT," + // 2: prodname
                "'SCCHECKNAME' TEXT," + // 3: sccheckname
                "'SCCHECKDATE' TEXT," + // 4: sccheckdate
                "'SCCHECKSTAT' TEXT," + // 5: sccheckstat
                "'SCCHECKDETAIL' TEXT);"); // 6: sccheckdetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SBJC_LIST_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SbjcListInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cpid = entity.getCpid();
        if (cpid != null) {
            stmt.bindLong(2, cpid);
        }
 
        String prodname = entity.getProdname();
        if (prodname != null) {
            stmt.bindString(3, prodname);
        }
 
        String sccheckname = entity.getSccheckname();
        if (sccheckname != null) {
            stmt.bindString(4, sccheckname);
        }
 
        String sccheckdate = entity.getSccheckdate();
        if (sccheckdate != null) {
            stmt.bindString(5, sccheckdate);
        }
 
        String sccheckstat = entity.getSccheckstat();
        if (sccheckstat != null) {
            stmt.bindString(6, sccheckstat);
        }
 
        String sccheckdetail = entity.getSccheckdetail();
        if (sccheckdetail != null) {
            stmt.bindString(7, sccheckdetail);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SbjcListInfo readEntity(Cursor cursor, int offset) {
        SbjcListInfo entity = new SbjcListInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cpid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // prodname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sccheckname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sccheckdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sccheckstat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sccheckdetail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SbjcListInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCpid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setProdname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSccheckname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSccheckdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSccheckstat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSccheckdetail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SbjcListInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SbjcListInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
