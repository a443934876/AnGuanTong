package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.YhzgInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table YHZG_INFO.
*/
public class YhzgInfoDao extends AbstractDao<YhzgInfo, Long> {

    public static final String TABLENAME = "YHZG_INFO";

    /**
     * Properties of entity YhzgInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HTroubleID = new Property(1, String.class, "hTroubleID", false, "H_TROUBLE_ID");
        public final static Property CheckDate = new Property(2, String.class, "checkDate", false, "CHECK_DATE");
        public final static Property LimitDate = new Property(3, String.class, "limitDate", false, "LIMIT_DATE");
        public final static Property TroubleGrade = new Property(4, String.class, "troubleGrade", false, "TROUBLE_GRADE");
        public final static Property CheckObject = new Property(5, String.class, "checkObject", false, "CHECK_OBJECT");
        public final static Property FinishDate = new Property(6, String.class, "finishDate", false, "FINISH_DATE");
        public final static Property SafetyTrouble = new Property(7, String.class, "safetyTrouble", false, "SAFETY_TROUBLE");
        public final static Property ActionOrgName = new Property(8, String.class, "actionOrgName", false, "ACTION_ORG_NAME");
        public final static Property EsCost = new Property(9, String.class, "esCost", false, "ES_COST");
        public final static Property DightCost = new Property(10, String.class, "dightCost", false, "DIGHT_COST");
        public final static Property LiabelEmid = new Property(11, String.class, "LiabelEmid", false, "LIABEL_EMID");
        public final static Property LiabelName = new Property(12, String.class, "LiabelName", false, "LIABEL_NAME");
        public final static Property AreaName = new Property(13, String.class, "areaName", false, "AREA_NAME");
        public final static Property InduName = new Property(14, String.class, "induName", false, "INDU_NAME");
        public final static Property ReviewDate = new Property(15, String.class, "reviewDate", false, "REVIEW_DATE");
    };


    public YhzgInfoDao(DaoConfig config) {
        super(config);
    }
    
    public YhzgInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'YHZG_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'H_TROUBLE_ID' TEXT," + // 1: hTroubleID
                "'CHECK_DATE' TEXT," + // 2: checkDate
                "'LIMIT_DATE' TEXT," + // 3: limitDate
                "'TROUBLE_GRADE' TEXT," + // 4: troubleGrade
                "'CHECK_OBJECT' TEXT," + // 5: checkObject
                "'FINISH_DATE' TEXT," + // 6: finishDate
                "'SAFETY_TROUBLE' TEXT," + // 7: safetyTrouble
                "'ACTION_ORG_NAME' TEXT," + // 8: actionOrgName
                "'ES_COST' TEXT," + // 9: esCost
                "'DIGHT_COST' TEXT," + // 10: dightCost
                "'LIABEL_EMID' TEXT," + // 11: LiabelEmid
                "'LIABEL_NAME' TEXT," + // 12: LiabelName
                "'AREA_NAME' TEXT," + // 13: areaName
                "'INDU_NAME' TEXT," + // 14: induName
                "'REVIEW_DATE' TEXT);"); // 15: reviewDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'YHZG_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, YhzgInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hTroubleID = entity.getHTroubleID();
        if (hTroubleID != null) {
            stmt.bindString(2, hTroubleID);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(3, checkDate);
        }
 
        String limitDate = entity.getLimitDate();
        if (limitDate != null) {
            stmt.bindString(4, limitDate);
        }
 
        String troubleGrade = entity.getTroubleGrade();
        if (troubleGrade != null) {
            stmt.bindString(5, troubleGrade);
        }
 
        String checkObject = entity.getCheckObject();
        if (checkObject != null) {
            stmt.bindString(6, checkObject);
        }
 
        String finishDate = entity.getFinishDate();
        if (finishDate != null) {
            stmt.bindString(7, finishDate);
        }
 
        String safetyTrouble = entity.getSafetyTrouble();
        if (safetyTrouble != null) {
            stmt.bindString(8, safetyTrouble);
        }
 
        String actionOrgName = entity.getActionOrgName();
        if (actionOrgName != null) {
            stmt.bindString(9, actionOrgName);
        }
 
        String esCost = entity.getEsCost();
        if (esCost != null) {
            stmt.bindString(10, esCost);
        }
 
        String dightCost = entity.getDightCost();
        if (dightCost != null) {
            stmt.bindString(11, dightCost);
        }
 
        String LiabelEmid = entity.getLiabelEmid();
        if (LiabelEmid != null) {
            stmt.bindString(12, LiabelEmid);
        }
 
        String LiabelName = entity.getLiabelName();
        if (LiabelName != null) {
            stmt.bindString(13, LiabelName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(14, areaName);
        }
 
        String induName = entity.getInduName();
        if (induName != null) {
            stmt.bindString(15, induName);
        }
 
        String reviewDate = entity.getReviewDate();
        if (reviewDate != null) {
            stmt.bindString(16, reviewDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public YhzgInfo readEntity(Cursor cursor, int offset) {
        YhzgInfo entity = new YhzgInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hTroubleID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // limitDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // troubleGrade
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // checkObject
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // finishDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // safetyTrouble
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // actionOrgName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // esCost
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dightCost
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // LiabelEmid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LiabelName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // areaName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // induName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // reviewDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, YhzgInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHTroubleID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLimitDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTroubleGrade(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckObject(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFinishDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSafetyTrouble(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActionOrgName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEsCost(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDightCost(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLiabelEmid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLiabelName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAreaName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInduName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReviewDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(YhzgInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(YhzgInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
