package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.YhfcCommitInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table YHFC_COMMIT_INFO.
*/
public class YhfcCommitInfoDao extends AbstractDao<YhfcCommitInfo, Long> {

    public static final String TABLENAME = "YHFC_COMMIT_INFO";

    /**
     * Properties of entity YhfcCommitInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Troubleid = new Property(1, Integer.class, "troubleid", false, "TROUBLEID");
        public final static Property TroubleName = new Property(2, String.class, "troubleName", false, "TROUBLE_NAME");
        public final static Property ReviewEmids = new Property(3, String.class, "reviewEmids", false, "REVIEW_EMIDS");
        public final static Property ReviewRemark = new Property(4, String.class, "reviewRemark", false, "REVIEW_REMARK");
        public final static Property ReviewDate = new Property(5, String.class, "reviewDate", false, "REVIEW_DATE");
        public final static Property DightedImgPath = new Property(6, String.class, "dightedImgPath", false, "DIGHTED_IMG_PATH");
    };


    public YhfcCommitInfoDao(DaoConfig config) {
        super(config);
    }
    
    public YhfcCommitInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'YHFC_COMMIT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TROUBLEID' INTEGER," + // 1: troubleid
                "'TROUBLE_NAME' TEXT," + // 2: troubleName
                "'REVIEW_EMIDS' TEXT," + // 3: reviewEmids
                "'REVIEW_REMARK' TEXT," + // 4: reviewRemark
                "'REVIEW_DATE' TEXT," + // 5: reviewDate
                "'DIGHTED_IMG_PATH' TEXT);"); // 6: dightedImgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'YHFC_COMMIT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, YhfcCommitInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer troubleid = entity.getTroubleid();
        if (troubleid != null) {
            stmt.bindLong(2, troubleid);
        }
 
        String troubleName = entity.getTroubleName();
        if (troubleName != null) {
            stmt.bindString(3, troubleName);
        }
 
        String reviewEmids = entity.getReviewEmids();
        if (reviewEmids != null) {
            stmt.bindString(4, reviewEmids);
        }
 
        String reviewRemark = entity.getReviewRemark();
        if (reviewRemark != null) {
            stmt.bindString(5, reviewRemark);
        }
 
        String reviewDate = entity.getReviewDate();
        if (reviewDate != null) {
            stmt.bindString(6, reviewDate);
        }
 
        String dightedImgPath = entity.getDightedImgPath();
        if (dightedImgPath != null) {
            stmt.bindString(7, dightedImgPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public YhfcCommitInfo readEntity(Cursor cursor, int offset) {
        YhfcCommitInfo entity = new YhfcCommitInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // troubleid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // troubleName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reviewEmids
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reviewRemark
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reviewDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // dightedImgPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, YhfcCommitInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTroubleid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTroubleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReviewEmids(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReviewRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReviewDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDightedImgPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(YhfcCommitInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(YhfcCommitInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
