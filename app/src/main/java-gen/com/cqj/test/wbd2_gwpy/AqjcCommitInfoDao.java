package com.cqj.test.wbd2_gwpy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cqj.test.wbd2_gwpy.AqjcCommitInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AQJC_COMMIT_INFO.
*/
public class AqjcCommitInfoDao extends AbstractDao<AqjcCommitInfo, Long> {

    public static final String TABLENAME = "AQJC_COMMIT_INFO";

    /**
     * Properties of entity AqjcCommitInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImagePath = new Property(1, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property CheckDate = new Property(2, String.class, "checkDate", false, "CHECK_DATE");
        public final static Property RecEmid = new Property(3, Integer.class, "recEmid", false, "REC_EMID");
        public final static Property DLimit = new Property(4, String.class, "dLimit", false, "D_LIMIT");
        public final static Property HDetail = new Property(5, String.class, "hDetail", false, "H_DETAIL");
        public final static Property DScheme = new Property(6, String.class, "dScheme", false, "D_SCHEME");
        public final static Property HGrade = new Property(7, String.class, "hGrade", false, "H_GRADE");
        public final static Property LEmid = new Property(8, Integer.class, "lEmid", false, "L_EMID");
        public final static Property DCost = new Property(9, Float.class, "dCost", false, "D_COST");
        public final static Property ObjOrganizationID = new Property(10, Integer.class, "objOrganizationID", false, "OBJ_ORGANIZATION_ID");
        public final static Property Taskid = new Property(11, Integer.class, "Taskid", false, "TASKID");
        public final static Property TaskName = new Property(12, String.class, "TaskName", false, "TASK_NAME");
        public final static Property CsName = new Property(13, String.class, "CsName", false, "CS_NAME");
        public final static Property FliedID = new Property(14, Integer.class, "FliedID", false, "FLIED_ID");
        public final static Property ObjPartid = new Property(15, Integer.class, "objPartid", false, "OBJ_PARTID");
        public final static Property SetStr = new Property(16, String.class, "SetStr", false, "SET_STR");
    };


    public AqjcCommitInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AqjcCommitInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AQJC_COMMIT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IMAGE_PATH' TEXT," + // 1: imagePath
                "'CHECK_DATE' TEXT," + // 2: checkDate
                "'REC_EMID' INTEGER," + // 3: recEmid
                "'D_LIMIT' TEXT," + // 4: dLimit
                "'H_DETAIL' TEXT," + // 5: hDetail
                "'D_SCHEME' TEXT," + // 6: dScheme
                "'H_GRADE' TEXT," + // 7: hGrade
                "'L_EMID' INTEGER," + // 8: lEmid
                "'D_COST' REAL," + // 9: dCost
                "'OBJ_ORGANIZATION_ID' INTEGER," + // 10: objOrganizationID
                "'TASKID' INTEGER," + // 11: Taskid
                "'TASK_NAME' TEXT," + // 12: TaskName
                "'CS_NAME' TEXT," + // 13: CsName
                "'FLIED_ID' INTEGER," + // 14: FliedID
                "'OBJ_PARTID' INTEGER," + // 15: objPartid
                "'SET_STR' TEXT);"); // 16: SetStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AQJC_COMMIT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AqjcCommitInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(2, imagePath);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(3, checkDate);
        }
 
        Integer recEmid = entity.getRecEmid();
        if (recEmid != null) {
            stmt.bindLong(4, recEmid);
        }
 
        String dLimit = entity.getDLimit();
        if (dLimit != null) {
            stmt.bindString(5, dLimit);
        }
 
        String hDetail = entity.getHDetail();
        if (hDetail != null) {
            stmt.bindString(6, hDetail);
        }
 
        String dScheme = entity.getDScheme();
        if (dScheme != null) {
            stmt.bindString(7, dScheme);
        }
 
        String hGrade = entity.getHGrade();
        if (hGrade != null) {
            stmt.bindString(8, hGrade);
        }
 
        Integer lEmid = entity.getLEmid();
        if (lEmid != null) {
            stmt.bindLong(9, lEmid);
        }
 
        Float dCost = entity.getDCost();
        if (dCost != null) {
            stmt.bindDouble(10, dCost);
        }
 
        Integer objOrganizationID = entity.getObjOrganizationID();
        if (objOrganizationID != null) {
            stmt.bindLong(11, objOrganizationID);
        }
 
        Integer Taskid = entity.getTaskid();
        if (Taskid != null) {
            stmt.bindLong(12, Taskid);
        }
 
        String TaskName = entity.getTaskName();
        if (TaskName != null) {
            stmt.bindString(13, TaskName);
        }
 
        String CsName = entity.getCsName();
        if (CsName != null) {
            stmt.bindString(14, CsName);
        }
 
        Integer FliedID = entity.getFliedID();
        if (FliedID != null) {
            stmt.bindLong(15, FliedID);
        }
 
        Integer objPartid = entity.getObjPartid();
        if (objPartid != null) {
            stmt.bindLong(16, objPartid);
        }
 
        String SetStr = entity.getSetStr();
        if (SetStr != null) {
            stmt.bindString(17, SetStr);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AqjcCommitInfo readEntity(Cursor cursor, int offset) {
        AqjcCommitInfo entity = new AqjcCommitInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkDate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // recEmid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dLimit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hDetail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dScheme
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hGrade
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lEmid
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // dCost
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // objOrganizationID
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Taskid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // TaskName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CsName
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // FliedID
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // objPartid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // SetStr
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AqjcCommitInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecEmid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDLimit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHDetail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDScheme(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHGrade(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLEmid(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDCost(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setObjOrganizationID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTaskid(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTaskName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCsName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFliedID(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setObjPartid(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSetStr(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AqjcCommitInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AqjcCommitInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
